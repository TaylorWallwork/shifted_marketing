{"version":3,"sources":["what-input.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","currentInput","currentIntent","doc","document","documentElement","formInputs","functionList","ignoreMap","changeIntentMap","inputMap","keydown","keyup","mousedown","mousemove","MSPointerDown","MSPointerMove","pointerdown","pointermove","touchstart","inputTypes","isBuffering","isScrolling","mousePos","x","y","pointerMap","2","3","4","supportsPassive","opts","Object","defineProperty","get","window","addEventListener","e","setUp","detectWheel","addListeners","setInput","options","passive","PointerEvent","updateInput","setIntent","MSPointerEvent","touchBuffer","event","eventKey","which","value","type","pointerType","activeElem","activeElement","activeInput","notFormInput","nodeName","indexOf","toLowerCase","setAttribute","push","className","fireFunctions","screenX","screenY","i","len","length","fn","undefined","wheelType","createElement","onmousewheel","objPos","match","Array","prototype","ask","opt","types","ignoreKeys","arr","registerOnChange","eventType","unRegisterOnChange","position","splice"],"mappings":"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","file":"scripts.js","sourcesContent":["/**\n * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).\n * @version v4.3.1\n * @link https://github.com/ten1seven/what-input\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"whatInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"whatInput\"] = factory();\n\telse\n\t\troot[\"whatInput\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function () {\n\t  /*\n\t   * variables\n\t   */\n\n\t  // last used input type\n\t  var currentInput = 'initial';\n\n\t  // last used input intent\n\t  var currentIntent = null;\n\n\t  // cache document.documentElement\n\t  var doc = document.documentElement;\n\n\t  // form input types\n\t  var formInputs = ['input', 'select', 'textarea'];\n\n\t  var functionList = [];\n\n\t  // list of modifier keys commonly used with the mouse and\n\t  // can be safely ignored to prevent false keyboard detection\n\t  var ignoreMap = [16, // shift\n\t  17, // control\n\t  18, // alt\n\t  91, // Windows key / left Apple cmd\n\t  93 // Windows menu / right Apple cmd\n\t  ];\n\n\t  // list of keys for which we change intent even for form inputs\n\t  var changeIntentMap = [9 // tab\n\t  ];\n\n\t  // mapping of events to input types\n\t  var inputMap = {\n\t    keydown: 'keyboard',\n\t    keyup: 'keyboard',\n\t    mousedown: 'mouse',\n\t    mousemove: 'mouse',\n\t    MSPointerDown: 'pointer',\n\t    MSPointerMove: 'pointer',\n\t    pointerdown: 'pointer',\n\t    pointermove: 'pointer',\n\t    touchstart: 'touch'\n\t  };\n\n\t  // array of all used input types\n\t  var inputTypes = [];\n\n\t  // boolean: true if touch buffer is active\n\t  var isBuffering = false;\n\n\t  // boolean: true if the page is being scrolled\n\t  var isScrolling = false;\n\n\t  // store current mouse position\n\t  var mousePos = {\n\t    x: null,\n\t    y: null\n\t  };\n\n\t  // map of IE 10 pointer events\n\t  var pointerMap = {\n\t    2: 'touch',\n\t    3: 'touch', // treat pen like touch\n\t    4: 'mouse'\n\t  };\n\n\t  var supportsPassive = false;\n\n\t  try {\n\t    var opts = Object.defineProperty({}, 'passive', {\n\t      get: function get() {\n\t        supportsPassive = true;\n\t      }\n\t    });\n\n\t    window.addEventListener('test', null, opts);\n\t  } catch (e) {}\n\n\t  /*\n\t   * set up\n\t   */\n\n\t  var setUp = function setUp() {\n\t    // add correct mouse wheel event mapping to `inputMap`\n\t    inputMap[detectWheel()] = 'mouse';\n\n\t    addListeners();\n\t    setInput();\n\t  };\n\n\t  /*\n\t   * events\n\t   */\n\n\t  var addListeners = function addListeners() {\n\t    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n\t    // can only demonstrate potential, but not actual, interaction\n\t    // and are treated separately\n\t    var options = supportsPassive ? { passive: true } : false;\n\n\t    // pointer events (mouse, pen, touch)\n\t    if (window.PointerEvent) {\n\t      doc.addEventListener('pointerdown', updateInput);\n\t      doc.addEventListener('pointermove', setIntent);\n\t    } else if (window.MSPointerEvent) {\n\t      doc.addEventListener('MSPointerDown', updateInput);\n\t      doc.addEventListener('MSPointerMove', setIntent);\n\t    } else {\n\t      // mouse events\n\t      doc.addEventListener('mousedown', updateInput);\n\t      doc.addEventListener('mousemove', setIntent);\n\n\t      // touch events\n\t      if ('ontouchstart' in window) {\n\t        doc.addEventListener('touchstart', touchBuffer, options);\n\t        doc.addEventListener('touchend', touchBuffer);\n\t      }\n\t    }\n\n\t    // mouse wheel\n\t    doc.addEventListener(detectWheel(), setIntent, options);\n\n\t    // keyboard events\n\t    doc.addEventListener('keydown', updateInput);\n\t    doc.addEventListener('keyup', updateInput);\n\t  };\n\n\t  // checks conditions before updating new input\n\t  var updateInput = function updateInput(event) {\n\t    // only execute if the touch buffer timer isn't running\n\t    if (!isBuffering) {\n\t      var eventKey = event.which;\n\t      var value = inputMap[event.type];\n\t      if (value === 'pointer') value = pointerType(event);\n\n\t      if (currentInput !== value || currentIntent !== value) {\n\t        var activeElem = document.activeElement;\n\t        var activeInput = false;\n\t        var notFormInput = activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1;\n\n\t        if (notFormInput || changeIntentMap.indexOf(eventKey) !== -1) {\n\t          activeInput = true;\n\t        }\n\n\t        if (value === 'touch' ||\n\t        // ignore mouse modifier keys\n\t        value === 'mouse' ||\n\t        // don't switch if the current element is a form input\n\t        value === 'keyboard' && eventKey && activeInput && ignoreMap.indexOf(eventKey) === -1) {\n\t          // set the current and catch-all variable\n\t          currentInput = currentIntent = value;\n\n\t          setInput();\n\t        }\n\t      }\n\t    }\n\t  };\n\n\t  // updates the doc and `inputTypes` array with new input\n\t  var setInput = function setInput() {\n\t    doc.setAttribute('data-whatinput', currentInput);\n\t    doc.setAttribute('data-whatintent', currentInput);\n\n\t    if (inputTypes.indexOf(currentInput) === -1) {\n\t      inputTypes.push(currentInput);\n\t      doc.className += ' whatinput-types-' + currentInput;\n\t    }\n\n\t    fireFunctions('input');\n\t  };\n\n\t  // updates input intent for `mousemove` and `pointermove`\n\t  var setIntent = function setIntent(event) {\n\t    // test to see if `mousemove` happened relative to the screen\n\t    // to detect scrolling versus mousemove\n\t    if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {\n\t      isScrolling = false;\n\n\t      mousePos['x'] = event.screenX;\n\t      mousePos['y'] = event.screenY;\n\t    } else {\n\t      isScrolling = true;\n\t    }\n\n\t    // only execute if the touch buffer timer isn't running\n\t    // or scrolling isn't happening\n\t    if (!isBuffering && !isScrolling) {\n\t      var value = inputMap[event.type];\n\t      if (value === 'pointer') value = pointerType(event);\n\n\t      if (currentIntent !== value) {\n\t        currentIntent = value;\n\n\t        doc.setAttribute('data-whatintent', currentIntent);\n\n\t        fireFunctions('intent');\n\t      }\n\t    }\n\t  };\n\n\t  // buffers touch events because they frequently also fire mouse events\n\t  var touchBuffer = function touchBuffer(event) {\n\t    if (event.type === 'touchstart') {\n\t      isBuffering = false;\n\n\t      // set the current input\n\t      updateInput(event);\n\t    } else {\n\t      isBuffering = true;\n\t    }\n\t  };\n\n\t  var fireFunctions = function fireFunctions(type) {\n\t    for (var i = 0, len = functionList.length; i < len; i++) {\n\t      if (functionList[i].type === type) {\n\t        functionList[i].fn.call(undefined, currentIntent);\n\t      }\n\t    }\n\t  };\n\n\t  /*\n\t   * utilities\n\t   */\n\n\t  var pointerType = function pointerType(event) {\n\t    if (typeof event.pointerType === 'number') {\n\t      return pointerMap[event.pointerType];\n\t    } else {\n\t      // treat pen like touch\n\t      return event.pointerType === 'pen' ? 'touch' : event.pointerType;\n\t    }\n\t  };\n\n\t  // detect version of mouse wheel event to use\n\t  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\t  var detectWheel = function detectWheel() {\n\t    var wheelType = void 0;\n\n\t    // Modern browsers support \"wheel\"\n\t    if ('onwheel' in document.createElement('div')) {\n\t      wheelType = 'wheel';\n\t    } else {\n\t      // Webkit and IE support at least \"mousewheel\"\n\t      // or assume that remaining browsers are older Firefox\n\t      wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n\t    }\n\n\t    return wheelType;\n\t  };\n\n\t  var objPos = function objPos(match) {\n\t    for (var i = 0, len = functionList.length; i < len; i++) {\n\t      if (functionList[i].fn === match) {\n\t        return i;\n\t      }\n\t    }\n\t  };\n\n\t  /*\n\t   * init\n\t   */\n\n\t  // don't start script unless browser cuts the mustard\n\t  // (also passes if polyfills are used)\n\t  if ('addEventListener' in window && Array.prototype.indexOf) {\n\t    setUp();\n\t  }\n\n\t  /*\n\t   * api\n\t   */\n\n\t  return {\n\t    // returns string: the current input type\n\t    // opt: 'loose'|'strict'\n\t    // 'strict' (default): returns the same value as the `data-whatinput` attribute\n\t    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`\n\t    ask: function ask(opt) {\n\t      return opt === 'loose' ? currentIntent : currentInput;\n\t    },\n\n\t    // returns array: all the detected input types\n\t    types: function types() {\n\t      return inputTypes;\n\t    },\n\n\t    // overwrites ignored keys with provided array\n\t    ignoreKeys: function ignoreKeys(arr) {\n\t      ignoreMap = arr;\n\t    },\n\n\t    // attach functions to input and intent \"events\"\n\t    // funct: function to fire on change\n\t    // eventType: 'input'|'intent'\n\t    registerOnChange: function registerOnChange(fn, eventType) {\n\t      functionList.push({\n\t        fn: fn,\n\t        type: eventType || 'input'\n\t      });\n\t    },\n\n\t    unRegisterOnChange: function unRegisterOnChange(fn) {\n\t      var position = objPos(fn);\n\n\t      if (position) {\n\t        functionList.splice(position, 1);\n\t      }\n\t    }\n\t  };\n\t}();\n\n/***/ }\n/******/ ])\n});\n;"]}